const API_URL = '/api/v1/accounts';
const BANKS_API_URL = '/api/v1/banks';
const CURRENCIES_API_URL = '/api/v1/currencies';

document.addEventListener('DOMContentLoaded', function () {
    initAccountsPage();
});

let accounts = [];
let banks = [];
let currencies = [];
let currentAccountId = null;

async function initAccountsPage() {
    await loadBanksAndCurrencies();
    await loadAccounts();
    setupEventListeners();
    initAnimations();
}

async function loadBanksAndCurrencies() {
    try {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–Ω–∫–∏ –∏ –≤–∞–ª—é—Ç—ã –¥–ª—è –≤—ã–ø–∞–¥–∞—é—â–∏—Ö —Å–ø–∏—Å–∫–æ–≤
        const [banksResponse, currenciesResponse] = await Promise.all([
            fetch(BANKS_API_URL),
            fetch(CURRENCIES_API_URL)
        ]);

        if (!banksResponse.ok || !currenciesResponse.ok) {
            throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö');
        }

        banks = await banksResponse.json();
        currencies = await currenciesResponse.json();

        // –ó–∞–ø–æ–ª–Ω—è–µ–º –≤—ã–ø–∞–¥–∞—é—â–∏–µ —Å–ø–∏—Å–∫–∏
        populateBanksDropdown();
        populateCurrenciesDropdown();

    } catch (error) {
        window.Utils.showError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –±–∞–Ω–∫–æ–≤ –∏ –≤–∞–ª—é—Ç');
        console.error('Error loading banks and currencies:', error);
    }
}

function populateBanksDropdown() {
    const bankSelect = document.getElementById('accountBank');
    bankSelect.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ –±–∞–Ω–∫</option>';

    banks.filter(bank => !bank.isDeleted).forEach(bank => {
        const option = document.createElement('option');
        option.value = bank.id;
        option.textContent = bank.name;
        bankSelect.appendChild(option);
    });
}

function populateCurrenciesDropdown() {
    const currencySelect = document.getElementById('accountCurrency');
    currencySelect.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É</option>';

    currencies.filter(currency => !currency.isDeleted).forEach(currency => {
        const option = document.createElement('option');
        option.value = currency.id;
        option.textContent = `${currency.name} (${currency.code})`;
        currencySelect.appendChild(option);
    });
}

async function loadAccounts() {
    try {
        showLoading();
        const response = await fetch(API_URL);
        if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—á–µ—Ç–æ–≤');

        accounts = await response.json();
        renderAccounts();
    } catch (error) {
        window.Utils.showError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—á–µ—Ç–æ–≤');
        console.error('Error loading accounts:', error);
    }
}

function renderAccounts(filteredAccounts = null) {
    const accountsList = document.getElementById('accountsList');
    const activeOnly = document.getElementById('activeOnly').checked;
    let dataToRender = filteredAccounts || accounts;

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    if (activeOnly) {
        dataToRender = dataToRender.filter(account => !account.isDeleted);
    }

    if (dataToRender.length === 0) {
        accountsList.innerHTML = `
            <div class="empty-state">
                <div class="empty-icon">üí≥</div>
                <h4>–°—á–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h4>
                <p>–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π —Å—á–µ—Ç, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É</p>
            </div>
        `;
        return;
    }

    accountsList.innerHTML = dataToRender.map(account => `
        <div class="list-item entity-item ${account.isDeleted ? 'deleted' : ''}" data-account-id="${account.id}">
            <div class="item-info">
                <div class="item-title">
                    <span class="account-symbol">üí≥</span>
                    ${account.name}
                    ${account.isDeleted ?
        '<span class="item-status status-deleted">üóëÔ∏è –£–¥–∞–ª–µ–Ω</span>'
        : '<span class="item-status status-active">‚úÖ –ê–∫—Ç–∏–≤–µ–Ω</span>'}
                </div>
                <div class="item-subtitle">
                    <div class="account-details">
                        <div class="account-info-item">
                            <span class="account-info-label">–ë–∞–Ω–∫:</span>
                            <span class="account-bank">${account.bank?.name || '–ù–µ —É–∫–∞–∑–∞–Ω'}</span>
                        </div>
                        <div class="account-info-item">
                            <span class="account-info-label">–í–∞–ª—é—Ç–∞:</span>
                            <span class="account-currency">${account.currency?.name || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'} (${account.currency?.code || '‚Äî'})</span>
                        </div>
                        <div class="item-dates">
                            <span class="date-label">–°–æ–∑–¥–∞–Ω:</span>
                            <span class="date-value">${window.Utils.formatDate(account.createdAt)}</span>
                        </div>
                        ${account.updatedAt ? `
                        <div class="item-dates">
                            <span class="date-label">–û–±–Ω–æ–≤–ª–µ–Ω:</span>
                            <span class="date-value">${window.Utils.formatDate(account.updatedAt)}</span>
                        </div>
                        ` : ''}
                    </div>
                </div>
            </div>
            <div class="item-actions">
                <button class="btn-action edit" onclick="editAccount(${account.id})" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">
                    ‚úèÔ∏è
                </button>
                ${!account.isDeleted ? `
                    <button class="btn-action delete" onclick="deleteAccount(${account.id})" title="–£–¥–∞–ª–∏—Ç—å">
                        üóëÔ∏è
                    </button>
                ` : `
                    <button class="btn-action restore" onclick="restoreAccount(${account.id})" title="–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å">
                        üîÑ
                    </button>
                `}
            </div>
        </div>
    `).join('');
}

function setupEventListeners() {
    // –ü–æ–∏—Å–∫
    document.getElementById('searchInput').addEventListener('input', function (e) {
        const searchTerm = e.target.value.toLowerCase();
        const filteredAccounts = accounts.filter(account =>
            account.name.toLowerCase().includes(searchTerm) ||
            account.bank?.name.toLowerCase().includes(searchTerm) ||
            account.currency?.name.toLowerCase().includes(searchTerm)
        );
        renderAccounts(filteredAccounts);
    });

    // –ß–µ–∫–±–æ–∫—Å "–¢–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å—á–µ—Ç–∞"
    document.getElementById('activeOnly').addEventListener('change', function () {
        renderAccounts();
    });

    // –§–æ—Ä–º–∞ —Å—á–µ—Ç–∞
    document.getElementById('accountForm')
        .addEventListener('submit', function (e) {
            e.preventDefault();
            saveAccount();
        });
}

// –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
function openAccountModal(accountId = null) {
    const modal = document.getElementById('accountModal');
    const title = document.getElementById('modalTitle');

    if (accountId) {
        title.textContent = '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—á–µ—Ç';
        const account = accounts.find(a => a.id === accountId);
        document.getElementById('accountId').value = account.id;
        document.getElementById('accountName').value = account.name;
        document.getElementById('accountBank').value = account.bank?.id || '';
        document.getElementById('accountCurrency').value = account.currency?.id || '';
    } else {
        title.textContent = '–î–æ–±–∞–≤–∏—Ç—å —Å—á–µ—Ç';
        document.getElementById('accountForm').reset();
    }

    modal.style.display = 'block';
}

function closeAccountModal() {
    document.getElementById('accountModal').style.display = 'none';
}

// CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏
async function saveAccount() {
    const accountId = document.getElementById('accountId').value;
    const accountName = document.getElementById('accountName').value.trim();
    const bankId = document.getElementById('accountBank').value;
    const currencyId = document.getElementById('accountCurrency').value;

    if (!accountName || !bankId || !currencyId) {
        window.Utils.showError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è');
        return;
    }

    try {
        const accountData = {
            name: accountName,
            bank: {id: parseInt(bankId)},
            currency: {id: parseInt(currencyId)}
        };
        let response;

        if (accountId) {
            // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            response = await fetch(`${API_URL}/${accountId}`, {
                method: 'PUT',
                headers: {'Content-Type': 'application/json'},
                body: JSON.stringify(accountData)
            });
        } else {
            // –°–æ–∑–¥–∞–Ω–∏–µ
            response = await fetch(API_URL, {
                method: 'POST',
                headers: {'Content-Type': 'application/json'},
                body: JSON.stringify(accountData)
            });
        }

        if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');

        // –û—á–∏—Å—Ç–∫–∞ accountId –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        document.getElementById('accountId').value = '';

        await loadAccounts();
        closeAccountModal();

    } catch (error) {
        window.Utils.showError('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å—á–µ—Ç–∞');
        console.error('Error saving account:', error);
    }
}

function editAccount(accountId) {
    openAccountModal(accountId);
}

async function deleteAccount(accountId) {
    if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Å—á–µ—Ç?')) {
        return;
    }

    try {
        const accountData = {isDeleted: true};
        const response = await fetch(`${API_URL}/${accountId}`, {
            method: 'DELETE',
            headers: {'Content-Type': 'application/json'},
            body: JSON.stringify(accountData)
        });

        if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è');

        await loadAccounts();

    } catch (error) {
        window.Utils.showError('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—á–µ—Ç–∞');
        console.error('Error deleting account:', error);
    }
}

async function restoreAccount(accountId) {
    try {
        const response = await fetch(`${API_URL}/${accountId}/restore`, {
            method: 'PUT',
            headers: {'Content-Type': 'application/json'},
        });

        if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è');

        await loadAccounts();

    } catch (error) {
        window.Utils.showError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—á–µ—Ç–∞');
        console.error('Error restoring account:', error);
    }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function showLoading() {
    const accountsList = document.getElementById('accountsList');
    accountsList.innerHTML = '<div class="loading">–ó–∞–≥—Ä—É–∑–∫–∞ —Å—á–µ—Ç–æ–≤...</div>';
}

// –ê–Ω–∏–º–∞—Ü–∏–∏
function initAnimations() {
    const cards = document.querySelectorAll('.content-card');
    cards.forEach((card, index) => {
        card.style.opacity = '0';
        card.style.transform = 'translateY(30px) scale(0.95)';
        setTimeout(() => {
            card.style.transition = 'all 0.6s cubic-bezier(0.4, 0, 0.2, 1)';
            card.style.opacity = '1';
            card.style.transform = 'translateY(0) scale(1)';
        }, index * 150);
    });
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –∏—Ö
window.onclick = function (event) {
    const modal = document.getElementById('accountModal');
    if (event.target === modal) {
        closeAccountModal();
    }
}