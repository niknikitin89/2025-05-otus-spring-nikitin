const API_URL = '/api/v1/transactions';
const ACCOUNTS_API_URL = '/api/v1/accounts';

document.addEventListener('DOMContentLoaded', function () {
    initTransactionsPage();
});

let transactions = [];
let accounts = [];
let currentTransactionId = null;
let currentFilters = {
    accounts: [],
    dateFrom: '',
    dateTo: '',
    type: '',
    search: ''
};

let choicesInstance;

async function initTransactionsPage() {
    initChoices(); // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Choices.js
    await loadAccounts();
    await loadTransactions();
    setupEventListeners();
    initAnimations();
    setupFilters();
}

function initChoices() {
    const element = document.getElementById('accountFilter');
    choicesInstance = new Choices(element, {
        removeItemButton: true,
        searchEnabled: true,
        searchPlaceholderValue: '–ü–æ–∏—Å–∫ —Å—á–µ—Ç–æ–≤...',
        placeholder: true,
        placeholderValue: '–í—ã–±–µ—Ä–∏—Ç–µ —Å—á–µ—Ç–∞',
        noResultsText: '–°—á–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã',
        noChoicesText: '–í—Å–µ —Å—á–µ—Ç–∞ –≤—ã–±—Ä–∞–Ω—ã',
        itemSelectText: '–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –≤—ã–±–æ—Ä–∞',
        shouldSort: false,
        position: 'bottom'
    });
}

async function loadAccounts() {
    try {
        const response = await fetch(ACCOUNTS_API_URL);
        if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—á–µ—Ç–æ–≤');

        accounts = await response.json();
        populateAccountsDropdown();
        populateAccountsFilter();

    } catch (error) {
        window.Utils.showError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—á–µ—Ç–æ–≤');
        console.error('Error loading accounts:', error);
    }
}

function populateAccountsDropdown() {
    const accountSelect = document.getElementById('transactionAccount');
    accountSelect.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Å—á–µ—Ç</option>';

    accounts.filter(account => !account.isDeleted).forEach(account => {
        const option = document.createElement('option');
        option.value = account.id;
        option.textContent = `${account.name} (${account.bank?.name}) - ${account.currency?.code}`;
        accountSelect.appendChild(option);
    });
}

function populateAccountsFilter() {
    // –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–µ –æ–ø—Ü–∏–∏
    if (choicesInstance) {
        choicesInstance.removeActiveItems();
        choicesInstance.clearStore();
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏—é "–í—Å–µ —Å—á–µ—Ç–∞"
    choicesInstance.setChoices([
        { value: '', label: '–í—Å–µ —Å—á–µ—Ç–∞', selected: true }
    ], 'value', 'label', false);

    // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å—á–µ—Ç–∞
    const accountOptions = accounts
        .filter(account => !account.isDeleted)
        .map(account => ({
            value: account.id,
            label: `üí≥ ${account.name} (${account.bank?.name} - ${account.currency?.code})`
        }));

    choicesInstance.setChoices(accountOptions, 'value', 'label', true);

    // const accountFilter = document.getElementById('accountFilter');
    // accountFilter.innerHTML = '<option value="">–í—Å–µ —Å—á–µ—Ç–∞</option>';
    //
    // accounts.filter(account => !account.isDeleted).forEach(account => {
    //     const option = document.createElement('option');
    //     option.value = account.id;
    //     option.textContent = `${account.name} (${account.bank?.name})`;
    //     accountFilter.appendChild(option);
    // });
}

function setupFilters() {
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∫–∞–∫ –¥–∞—Ç—É "–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é" –¥–ª—è –ø–æ–ª—è –¥–∞—Ç—ã
    const today = new Date().toISOString().split('T')[0];
    document.getElementById('transactionDate').value = today;
}

async function loadTransactions() {
    try {
        showLoading();
debugger;
        // –°—Ç—Ä–æ–∏–º URL —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        const url = new URL(API_URL, window.location.origin);

        if (currentFilters.accounts.length > 0) {
            currentFilters.accounts.forEach(accountId => {
                url.searchParams.append('accountIds', accountId);
            });
        }

        if (currentFilters.dateFrom) {
            url.searchParams.append('dateFrom', currentFilters.dateFrom);
        }

        if (currentFilters.dateTo) {
            url.searchParams.append('dateTo', currentFilters.dateTo);
        }

        if (currentFilters.type) {
            url.searchParams.append('type', currentFilters.type);
        }

        const response = await fetch(url);
        if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π');

        transactions = await response.json();
        renderTransactions();
    } catch (error) {
        window.Utils.showError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π');
        console.error('Error loading transactions:', error);
    }
}

function renderTransactions(filteredTransactions = null) {
    const transactionsList = document.getElementById('transactionsList');
    const activeOnly = document.getElementById('activeOnly').checked;
    let dataToRender = filteredTransactions || transactions;

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    if (activeOnly) {
        dataToRender = dataToRender.filter(transaction => !transaction.isDeleted);
    }

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–æ–∏—Å–∫—É (–Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ)
    if (currentFilters.search) {
        const searchTerm = currentFilters.search.toLowerCase();
        dataToRender = dataToRender.filter(transaction =>
            transaction.description?.toLowerCase().includes(searchTerm)
        );
    }

    if (dataToRender.length === 0) {
        transactionsList.innerHTML = `
            <div class="empty-state">
                <div class="empty-icon">üîÑ</div>
                <h4>–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h4>
                <p>–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏</p>
            </div>
        `;
        return;
    }

    transactionsList.innerHTML = dataToRender.map(transaction => {
        const amountClass = getAmountClass(transaction.type);
        const typeClass = getTypeClass(transaction.type);
        const typeText = getTypeText(transaction.type);
        const amountSign = transaction.type === 'EXPENSE' ? '-' : '+';

        return `
        <div class="list-item entity-item ${transaction.isDeleted ? 'deleted' : ''}" data-transaction-id="${transaction.id}">
            <div class="item-info">
                <div class="item-title">
                    ${transaction.description || '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}
                    <span class="transaction-type ${typeClass}">${typeText}</span>
                    ${transaction.isDeleted ?
            '<span class="item-status status-deleted">üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞</span>'
            : '<span class="item-status status-active">‚úÖ –ê–∫—Ç–∏–≤–Ω–∞</span>'}
                </div>
                <div class="item-subtitle">
                    <div class="transaction-details">
                        <div class="transaction-info-item">
                            <span class="transaction-info-label">–°—á–µ—Ç:</span>
                            <span class="account-bank">${transaction.account?.name || '–ù–µ —É–∫–∞–∑–∞–Ω'} (${transaction.account?.bank?.name || '‚Äî'})</span>
                        </div>
                        <div class="transaction-info-item">
                            <span class="transaction-info-label">–î–∞—Ç–∞:</span>
                            <span class="date-value">${formatTransactionDate(transaction.transactionDate)}</span>
                        </div>
                        <div class="item-dates">
                            <span class="date-label">–°–æ–∑–¥–∞–Ω–∞:</span>
                            <span class="date-value">${window.Utils.formatDate(transaction.createdAt)}</span>
                        </div>
                        ${transaction.updatedAt ? `
                        <div class="item-dates">
                            <span class="date-label">–û–±–Ω–æ–≤–ª–µ–Ω–∞:</span>
                            <span class="date-value">${window.Utils.formatDate(transaction.updatedAt)}</span>
                        </div>
                        ` : ''}
                    </div>
                </div>
            </div>
            <div class="transaction-amount ${amountClass}">
                ${amountSign}${formatAmount(transaction.amount)} ${transaction.account?.currency?.code || ''}
            </div>
            <div class="item-actions">
                <button class="btn-action edit" onclick="editTransaction(${transaction.id})" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">
                    ‚úèÔ∏è
                </button>
                ${!transaction.isDeleted ? `
                    <button class="btn-action delete" onclick="deleteTransaction(${transaction.id})" title="–£–¥–∞–ª–∏—Ç—å">
                        üóëÔ∏è
                    </button>
                ` : `
                    <button class="btn-action restore" onclick="restoreTransaction(${transaction.id})" title="–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å">
                        üîÑ
                    </button>
                `}
            </div>
        </div>
        `;
    }).join('');
}

function setupEventListeners() {
    // –ü–æ–∏—Å–∫
    document.getElementById('searchInput').addEventListener('input', function (e) {
        currentFilters.search = e.target.value.toLowerCase();
        renderTransactions();
    });

    // –ß–µ–∫–±–æ–∫—Å "–¢–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"
    document.getElementById('activeOnly').addEventListener('change', function () {
        renderTransactions();
    });

    // –§–æ—Ä–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    document.getElementById('transactionForm').addEventListener('submit', function (e) {
        e.preventDefault();
        saveTransaction();
    });

    // –ó–∞–∫—Ä—ã—Ç–∏–µ Choices –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –æ–±–ª–∞—Å—Ç–∏
    document.addEventListener('click', function(event) {
        const choices = document.querySelector('.choices');
        if (choices && !choices.contains(event.target)) {
            const dropdown = choices.querySelector('.choices__list--dropdown');
            if (dropdown && dropdown.classList.contains('is-active')) {
                choicesInstance.hideDropdown();
            }
        }
    });
}

// –§—É–Ω–∫—Ü–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
function applyFilters() {
    // –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ Choices
    const selectedValues = choicesInstance.getValue(true);
    const selectedAccounts = selectedValues
        .map(item => item.value)
        .filter(value => value !== ''); // –ò—Å–∫–ª—é—á–∞–µ–º "–í—Å–µ —Å—á–µ—Ç–∞"

    const accountFilter = document.getElementById('accountFilter');
    const dateFrom = document.getElementById('dateFrom').value;
    const dateTo = document.getElementById('dateTo').value;
    const typeFilter = document.getElementById('typeFilter').value;

    currentFilters.accounts = selectedAccounts;// Array.from(accountFilter.selectedOptions).map(option => option.value).filter(Boolean);
    currentFilters.dateFrom = dateFrom;
    currentFilters.dateTo = dateTo;
    currentFilters.type = typeFilter;

    loadTransactions(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å —Å–µ—Ä–≤–µ—Ä–∞ —Å –Ω–æ–≤—ã–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
}

function resetFilters() {
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º Choices
    if (choicesInstance) {
        choicesInstance.removeActiveItems();
        choicesInstance.setChoiceByValue('');
    }

    document.getElementById('accountFilter').selectedIndex = -1;
    document.getElementById('dateFrom').value = '';
    document.getElementById('dateTo').value = '';
    document.getElementById('typeFilter').value = '';
    document.getElementById('searchInput').value = '';

    currentFilters = {
        accounts: [],
        dateFrom: '',
        dateTo: '',
        type: '',
        search: ''
    };

    loadTransactions();
}

// –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
function openTransactionModal(transactionId = null) {
    const modal = document.getElementById('transactionModal');
    const title = document.getElementById('modalTitle');

    if (transactionId) {
        title.textContent = '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é';
        const transaction = transactions.find(t => t.id === transactionId);
        document.getElementById('transactionId').value = transaction.id;
        document.getElementById('transactionAccount').value = transaction.account?.id || '';
        document.getElementById('transactionType').value = transaction.type;
        document.getElementById('transactionAmount').value = transaction.amount;
        document.getElementById('transactionDate').value = transaction.transactionDate;
        document.getElementById('transactionDescription').value = transaction.description || '';
    } else {
        title.textContent = '–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é';
        document.getElementById('transactionForm').reset();
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        const today = new Date().toISOString().split('T')[0];
        document.getElementById('transactionDate').value = today;
    }

    modal.style.display = 'block';
}

function closeTransactionModal() {
    document.getElementById('transactionModal').style.display = 'none';
}

// CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏
async function saveTransaction() {
    const transactionId = document.getElementById('transactionId').value;
    const accountId = document.getElementById('transactionAccount').value;
    const type = document.getElementById('transactionType').value;
    const amount = parseFloat(document.getElementById('transactionAmount').value);
    const transactionDate = document.getElementById('transactionDate').value;
    const description = document.getElementById('transactionDescription').value.trim();

    if (!accountId || !type || !amount || !transactionDate) {
        window.Utils.showError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è');
        return;
    }

    if (amount <= 0) {
        window.Utils.showError('–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0');
        return;
    }

    try {
        const transactionData = {
            accountId: parseInt(accountId),
            type: type,
            amount: amount,
            transactionDate: transactionDate,
            description: description
        };
        let response;

        if (transactionId) {
            // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            response = await fetch(`${API_URL}/${transactionId}`, {
                method: 'PUT',
                headers: {'Content-Type': 'application/json'},
                body: JSON.stringify(transactionData)
            });
        } else {
            // –°–æ–∑–¥–∞–Ω–∏–µ
            response = await fetch(API_URL, {
                method: 'POST',
                headers: {'Content-Type': 'application/json'},
                body: JSON.stringify(transactionData)
            });
        }

        if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');

        // –û—á–∏—Å—Ç–∫–∞ transactionId –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        document.getElementById('transactionId').value = '';

        await loadTransactions();
        closeTransactionModal();

    } catch (error) {
        window.Utils.showError('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏');
        console.error('Error saving transaction:', error);
    }
}

function editTransaction(transactionId) {
    openTransactionModal(transactionId);
}

async function deleteTransaction(transactionId) {
    if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é?')) {
        return;
    }

    try {
        const transactionData = {isDeleted: true};
        const response = await fetch(`${API_URL}/${transactionId}`, {
            method: 'DELETE',
            headers: {'Content-Type': 'application/json'},
            body: JSON.stringify(transactionData)
        });

        if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è');

        await loadTransactions();

    } catch (error) {
        window.Utils.showError('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏');
        console.error('Error deleting transaction:', error);
    }
}

async function restoreTransaction(transactionId) {
    try {
        const response = await fetch(`${API_URL}/${transactionId}/restore`, {
            method: 'PUT',
            headers: {'Content-Type': 'application/json'},
        });

        if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è');

        await loadTransactions();

    } catch (error) {
        window.Utils.showError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏');
        console.error('Error restoring transaction:', error);
    }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function getAmountClass(type) {
    switch (type) {
        case 'INCOME': return 'income';
        case 'EXPENSE': return 'expense';
        case 'TRANSFER': return 'transfer';
        default: return '';
    }
}

function getTypeClass(type) {
    switch (type) {
        case 'INCOME': return 'type-income';
        case 'EXPENSE': return 'type-expense';
        case 'TRANSFER': return 'type-transfer';
        default: return '';
    }
}

function getTypeText(type) {
    switch (type) {
        case 'INCOME': return '–î–æ—Ö–æ–¥';
        case 'EXPENSE': return '–†–∞—Å—Ö–æ–¥';
        case 'TRANSFER': return '–ü–µ—Ä–µ–≤–æ–¥';
        default: return type;
    }
}

function formatAmount(amount) {
    return parseFloat(amount).toFixed(2);
}

function formatTransactionDate(dateString) {
    if (!dateString) return '‚Äî';
    const date = new Date(dateString);
    return date.toLocaleDateString('ru-RU');
}

function showLoading() {
    const transactionsList = document.getElementById('transactionsList');
    transactionsList.innerHTML = '<div class="loading">–ó–∞–≥—Ä—É–∑–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π...</div>';
}

// –ê–Ω–∏–º–∞—Ü–∏–∏
function initAnimations() {
    const cards = document.querySelectorAll('.content-card');
    cards.forEach((card, index) => {
        card.style.opacity = '0';
        card.style.transform = 'translateY(30px) scale(0.95)';
        setTimeout(() => {
            card.style.transition = 'all 0.6s cubic-bezier(0.4, 0, 0.2, 1)';
            card.style.opacity = '1';
            card.style.transform = 'translateY(0) scale(1)';
        }, index * 150);
    });
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –∏—Ö
window.onclick = function (event) {
    const modal = document.getElementById('transactionModal');
    if (event.target === modal) {
        closeTransactionModal();
    }
}