const API_URL = '/api/v1/banks';

document.addEventListener('DOMContentLoaded', function () {
    initBanksPage();
});

let banks = [];
let currentBankId = null;

async function initBanksPage() {
    await loadBanks();
    setupEventListeners();
    initAnimations();
}

async function loadBanks() {
    try {
        showLoading();
        const response = await fetch(API_URL);
        if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–Ω–∫–æ–≤');

        banks = await response.json();
        renderBanks();
    } catch (error) {
        window.Utils.showError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –±–∞–Ω–∫–æ–≤');
        console.error('Error loading banks:', error);
    }
}

function renderBanks(filteredBanks = null) {
    const banksList = document.getElementById('banksList');
    const activeOnly = document.getElementById('activeOnly').checked;
    let dataToRender = filteredBanks || banks;

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    if (activeOnly) {
        dataToRender = dataToRender.filter(bank => !bank.isDeleted);
    }

    if (dataToRender.length === 0) {
        banksList.innerHTML = `
            <div class="empty-state">
                <div class="empty-icon">üè¶</div>
                <h4>–ë–∞–Ω–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h4>
                <p>–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π –±–∞–Ω–∫, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É</p>
            </div>
        `;
        return;
    }

    banksList.innerHTML = dataToRender.map(bank => `
        <div class="list-item entity-item ${bank.isDeleted ? 'deleted' : ''}" data-bank-id="${bank.id}">
            <div class="item-info">
                <div class="item-title">
                    ${bank.name}
                    ${bank.isDeleted ? '<span class="item-status status-deleted">üóëÔ∏è –£–¥–∞–ª–µ–Ω</span>' 
                    : '<span class="item-status status-active">‚úÖ –ê–∫—Ç–∏–≤–µ–Ω</span>'}
                </div>
                <div class="item-subtitle">
                    <div class="item-details">
                        <div class="item-dates">
                            <span class="date-label">–°–æ–∑–¥–∞–Ω:</span>
                            <span class="date-value">${window.Utils.formatDate(bank.createdAt)}</span>
                        </div>
                        ${bank.updatedAt ? `
                        <div class="item-dates">
                            <span class="date-label">–û–±–Ω–æ–≤–ª–µ–Ω:</span>
                            <span class="date-value">${window.Utils.formatDate(bank.updatedAt)}</span>
                        </div>
                        ` : ''}
                    </div>
                </div>
            </div>
            <div class="item-actions">
                <button class="btn-action edit" onclick="editBank(${bank.id})" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">
                    ‚úèÔ∏è
                </button>
                ${!bank.isDeleted ? `
                    <button class="btn-action delete" onclick="deleteBank(${bank.id})" title="–£–¥–∞–ª–∏—Ç—å">
                        üóëÔ∏è
                    </button>
                ` : `
                    <button class="btn-action restore" onclick="restoreBank(${bank.id})" title="–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å">
                        üîÑ
                    </button>
                `}
            </div>
        </div>
    `).join('');
}

function setupEventListeners() {
    // –ü–æ–∏—Å–∫
    document.getElementById('searchInput').addEventListener('input', function (e) {
        const searchTerm = e.target.value.toLowerCase();
        const filteredBanks = banks.filter(bank =>
            bank.name.toLowerCase().includes(searchTerm)
        );
        renderBanks(filteredBanks);
    });

    //–ß–µ–∫–±–æ–∫—Å "–¢–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –±–∞–Ω–∫–∏"
    document.getElementById('activeOnly').addEventListener('change', function () {
        renderBanks();
    });

    // –§–æ—Ä–º–∞ –±–∞–Ω–∫–∞
    document.getElementById('bankForm').addEventListener('submit', function (e) {
        e.preventDefault();
        saveBank();
    });
}

// –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
function openBankModal(bankId = null) {
    const modal = document.getElementById('bankModal');
    const title = document.getElementById('modalTitle')

    if (bankId) {
        title.textContent = '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –±–∞–Ω–∫';
        const bank = banks.find(b => b.id === bankId);
        document.getElementById('bankId').value = bank.id;
        document.getElementById('bankName').value = bank.name;
    } else {
        title.textContent = '–î–æ–±–∞–≤–∏—Ç—å –±–∞–Ω–∫';
        document.getElementById('bankForm').reset();
    }

    modal.style.display = 'block';
}

function closeBankModal() {
    document.getElementById('bankModal').style.display = 'none';
}

// CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏
async function saveBank() {
    const bankId = document.getElementById('bankId').value;
    const bankName = document.getElementById('bankName').value.trim();

    if (!bankName) {
        window.Utils.showError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞');
        return;
    }

    try {
        const bankData = {
            name: bankName,
        };
        let response;

        if (bankId) {
            // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            response = await fetch(`${API_URL}/${bankId}`, {
                method: 'PUT',
                headers: {'Content-Type': 'application/json'},
                body: JSON.stringify(bankData)
            });
        } else {
            // –°–æ–∑–¥–∞–Ω–∏–µ
            response = await fetch(API_URL, {
                method: 'POST',
                headers: {'Content-Type': 'application/json'},
                body: JSON.stringify(bankData)
            });
        }

        if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');

        // –û–ß–ò–°–¢–ö–ê bankId –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        document.getElementById('bankId').value = '';

        await loadBanks();
        closeBankModal();
        // showNotification(bankId ? '–ë–∞–Ω–∫ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω' : '–ë–∞–Ω–∫ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω');

    } catch (error) {
        window.Utils.showError('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –±–∞–Ω–∫–∞');
        console.error('Error saving bank:', error);
    }
}

function editBank(bankId) {
    openBankModal(bankId);
}

async function deleteBank(bankId) {
    if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –±–∞–Ω–∫?')) {
        return;
    }

    try {
        const bankData = {isDeleted: true};
        const response = await fetch(`${API_URL}/${bankId}`, {
            method: 'DELETE',
            headers: {'Content-Type': 'application/json'},
            body: JSON.stringify(bankData)
        });

        if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è');

        await loadBanks();
        // showNotification('–ë–∞–Ω–∫ –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ —É–¥–∞–ª–µ–Ω–Ω—ã–π');

    } catch (error) {
        window.Utils.showError('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –±–∞–Ω–∫–∞');
        console.error('Error deleting bank:', error);
    }
}

async function restoreBank(bankId) {
    try {
        const response = await fetch(`${API_URL}/${bankId}/restore`, {
            method: 'PUT',
            headers: {'Content-Type': 'application/json'},
        });

        if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è');

        await loadBanks();
        // showNotification('–ë–∞–Ω–∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');

    } catch (error) {
        window.Utils.showError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–Ω–∫–∞');
        console.error('Error restoring bank:', error);
    }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function showLoading() {
    const banksList = document.getElementById('banksList');
    banksList.innerHTML = '<div class="loading">–ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–Ω–∫–æ–≤...</div>';
}

function showNotification(message) {
    console.log('Notification:', message);
    alert(message);
}

// –ê–Ω–∏–º–∞—Ü–∏–∏
function initAnimations() {
    const cards = document.querySelectorAll('.content-card');
    cards.forEach((card, index) => {
        card.style.opacity = '0';
        card.style.transform = 'translateY(30px) scale(0.95)';
        setTimeout(() => {
            card.style.transition = 'all 0.6s cubic-bezier(0.4, 0, 0.2, 1)';
            card.style.opacity = '1';
            card.style.transform = 'translateY(0) scale(1)';
        }, index * 150);
    });
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –∏—Ö
window.onclick = function (event) {
    const modal = document.getElementById('bankModal');
    if (event.target === modal) {
        closeBankModal();
    }
}