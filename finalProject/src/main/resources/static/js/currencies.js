const API_URL = '/api/v1/currencies';

document.addEventListener('DOMContentLoaded', function () {
    initCurrenciesPage();
});

let currencies = [];
let currentCurrencyId = null;

async function initCurrenciesPage() {
    await loadCurrencies();
    setupEventListeners();
    initAnimations();
}

async function loadCurrencies() {
    try {
        showLoading();
        const response = await fetch(API_URL);
        if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∞–ª—é—Ç');

        currencies = await response.json();
        renderCurrencies();
    } catch (error) {
        window.Utils.showError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤–∞–ª—é—Ç');
        console.error('Error loading currencies:', error);
    }
}

function renderCurrencies(filteredCurrencies = null) {
    const currenciesList = document.getElementById('currenciesList');
    const activeOnly = document.getElementById('activeOnly').checked;
    let dataToRender = filteredCurrencies || currencies;

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    if (activeOnly) {
        dataToRender = dataToRender.filter(currency => !currency.isDeleted);
    }

    if (dataToRender.length === 0) {
        currenciesList.innerHTML = `
            <div class="empty-state">
                <div class="empty-icon">üí∞</div>
                <h4>–í–∞–ª—é—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h4>
                <p>–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é –≤–∞–ª—é—Ç—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É</p>
            </div>
        `;
        return;
    }

    currenciesList.innerHTML = dataToRender.map(currency => `
        <div class="list-item entity-item ${currency.isDeleted ? 'deleted' : ''}" data-currency-id="${currency.id}">
            <div class="item-info">
                <div class="item-title">
                    <span class="currency-symbol">üíµ</span>
                    ${currency.name}
                    <span class="currency-code">(${currency.code})</span>
                    ${currency.isDeleted ?
                        '<span class="item-status status-deleted">üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞</span>'
                        : '<span class="item-status status-active">‚úÖ –ê–∫—Ç–∏–≤–Ω–∞</span>'}
                </div>
                <div class="item-subtitle">
                    <div class="item-details">
                        <div class="item-dates">
                            <span class="date-label">–°–æ–∑–¥–∞–Ω–∞:</span>
                            <span class="date-value">${window.Utils.formatDate(currency.createdAt)}</span>
                        </div>
                        ${currency.updatedAt ? `
                        <div class="item-dates">
                            <span class="date-label">–û–±–Ω–æ–≤–ª–µ–Ω–∞:</span>
                            <span class="date-value">${window.Utils.formatDate(currency.updatedAt)}</span>
                        </div>
                        ` : ''}
                    </div>
                </div>
            </div>
            <div class="item-actions">
                <button class="btn-action edit" onclick="editCurrency(${currency.id})" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">
                    ‚úèÔ∏è
                </button>
                ${!currency.isDeleted ? `
                    <button class="btn-action delete" onclick="deleteCurrency(${currency.id})" title="–£–¥–∞–ª–∏—Ç—å">
                        üóëÔ∏è
                    </button>
                ` : `
                    <button class="btn-action restore" onclick="restoreCurrency(${currency.id})" title="–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å">
                        üîÑ
                    </button>
                `}
            </div>
        </div>
    `).join('');
}

function setupEventListeners() {
    // –ü–æ–∏—Å–∫
    document.getElementById('searchInput').addEventListener('input', function (e) {
        const searchTerm = e.target.value.toLowerCase();
        const filteredCurrencies = currencies.filter(currency =>
            currency.name.toLowerCase().includes(searchTerm) ||
            currency.code.toLowerCase().includes(searchTerm)
        );
        renderCurrencies(filteredCurrencies);
    });

    // –ß–µ–∫–±–æ–∫—Å "–¢–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –≤–∞–ª—é—Ç—ã"
    document.getElementById('activeOnly').addEventListener('change', function () {
        renderCurrencies();
    });

    // –§–æ—Ä–º–∞ –≤–∞–ª—é—Ç—ã
    document.getElementById('currencyForm').addEventListener('submit', function (e) {
        e.preventDefault();
        saveCurrency();
    });

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞ –≤–∞–ª—é—Ç—ã –≤ –≤–µ—Ä—Ö–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä
    document.getElementById('currencyCode').addEventListener('input', function (e) {
        e.target.value = e.target.value.toUpperCase();
    });
}

// –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
function openCurrencyModal(currencyId = null) {
    const modal = document.getElementById('currencyModal');
    const title = document.getElementById('modalTitle');

    if (currencyId) {
        title.textContent = '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∞–ª—é—Ç—É';
        const currency = currencies.find(c => c.id === currencyId);
        document.getElementById('currencyId').value = currency.id;
        document.getElementById('currencyCode').value = currency.code;
        document.getElementById('currencyName').value = currency.name;
    } else {
        title.textContent = '–î–æ–±–∞–≤–∏—Ç—å –≤–∞–ª—é—Ç—É';
        document.getElementById('currencyForm').reset();
    }

    modal.style.display = 'block';
}

function closeCurrencyModal() {
    document.getElementById('currencyModal').style.display = 'none';
}

// CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏
async function saveCurrency() {
    const currencyId = document.getElementById('currencyId').value;
    const currencyCode = document.getElementById('currencyCode').value.trim().toUpperCase();
    const currencyName = document.getElementById('currencyName').value.trim();

    if (!currencyCode || !currencyName) {
        window.Utils.showError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è');
        return;
    }

    if (currencyCode.length !== 3) {
        window.Utils.showError('–ö–æ–¥ –≤–∞–ª—é—Ç—ã –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 3 –±—É–∫–≤');
        return;
    }

    try {
        const currencyData = {
            code: currencyCode,
            name: currencyName,
        };
        let response;

        if (currencyId) {
            // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            response = await fetch(`${API_URL}/${currencyId}`, {
                method: 'PUT',
                headers: {'Content-Type': 'application/json'},
                body: JSON.stringify(currencyData)
            });
        } else {
            // –°–æ–∑–¥–∞–Ω–∏–µ
            response = await fetch(API_URL, {
                method: 'POST',
                headers: {'Content-Type': 'application/json'},
                body: JSON.stringify(currencyData)
            });
        }

        if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');

        // –û—á–∏—Å—Ç–∫–∞ currencyId –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        document.getElementById('currencyId').value = '';

        await loadCurrencies();
        closeCurrencyModal();
        // showNotification(currencyId ? '–í–∞–ª—é—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞' : '–í–∞–ª—é—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞');

    } catch (error) {
        window.Utils.showError('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–∞–ª—é—Ç—ã');
        console.error('Error saving currency:', error);
    }
}

function editCurrency(currencyId) {
    openCurrencyModal(currencyId);
}

async function deleteCurrency(currencyId) {
    if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –≤–∞–ª—é—Ç—É?')) {
        return;
    }

    try {
        const currencyData = {isDeleted: true};
        const response = await fetch(`${API_URL}/${currencyId}`, {
            method: 'DELETE',
            headers: {'Content-Type': 'application/json'},
            body: JSON.stringify(currencyData)
        });

        if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è');

        await loadCurrencies();
        // window.Utils.showNotification('–í–∞–ª—é—Ç–∞ –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ —É–¥–∞–ª–µ–Ω–Ω–∞—è');

    } catch (error) {
        window.Utils.showError('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–∞–ª—é—Ç—ã');
        console.error('Error deleting currency:', error);
    }
}

async function restoreCurrency(currencyId) {
    try {
        const response = await fetch(`${API_URL}/${currencyId}/restore`, {
            method: 'PUT',
            headers: {'Content-Type': 'application/json'},
        });

        if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è');

        await loadCurrencies();
        // showNotification('–í–∞–ª—é—Ç–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');

    } catch (error) {
        window.Utils.showError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤–∞–ª—é—Ç—ã');
        console.error('Error restoring currency:', error);
    }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function showLoading() {
    const currenciesList = document.getElementById('currenciesList');
    currenciesList.innerHTML = '<div class="loading">–ó–∞–≥—Ä—É–∑–∫–∞ –≤–∞–ª—é—Ç...</div>';
}

// –ê–Ω–∏–º–∞—Ü–∏–∏
function initAnimations() {
    const cards = document.querySelectorAll('.content-card');
    cards.forEach((card, index) => {
        card.style.opacity = '0';
        card.style.transform = 'translateY(30px) scale(0.95)';
        setTimeout(() => {
            card.style.transition = 'all 0.6s cubic-bezier(0.4, 0, 0.2, 1)';
            card.style.opacity = '1';
            card.style.transform = 'translateY(0) scale(1)';
        }, index * 150);
    });
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –∏—Ö
window.onclick = function (event) {
    const modal = document.getElementById('currencyModal');
    if (event.target === modal) {
        closeCurrencyModal();
    }
}